/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * Author:  Gonzalo
 * Created: Sep 14, 2018
 */

-------------------------------------------------------------------------------------------------------------------------------
-- ELIMINAR USUARIO Y BD (PARA REINICIAR)
-------------------------------------------------------------------------------------------------------------------------------
DROP USER pide_tu_estacionamiento CASCADE;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- CREACION USUARIO + PERMISOS
-------------------------------------------------------------------------------------------------------------------------------
CREATE USER pide_tu_estacionamiento IDENTIFIED BY pide_tu_estacionamiento
      DEFAULT TABLESPACE users
      TEMPORARY TABLESPACE temp
      QUOTA UNLIMITED ON users;      
GRANT CREATE session TO pide_tu_estacionamiento;
GRANT CREATE table TO pide_tu_estacionamiento;
GRANT CREATE view TO pide_tu_estacionamiento;
GRANT CREATE procedure TO pide_tu_estacionamiento;
GRANT CREATE SEQUENCE TO pide_tu_estacionamiento;  
GRANT CREATE synonym TO pide_tu_estacionamiento;      
-------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------
-- STRING DE CONEXION ORACLE
-- pide_tu_estacionamiento	pide_tu_estacionamiento@//localhost:1521/xe
-------------------------------------------------------------------------------------------------------------------------------








-------------------------------------------------------------------------------------------------------------------------------
-- BD
-------------------------------------------------------------------------------------------------------------------------------
-- Generated by Oracle SQL Developer Data Modeler 17.4.0.355.2121
--   at:        2018-09-01 00:17:30 GMT-04:00
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g


CREATE TABLE banco (
    id_banco   NUMBER(11) NOT NULL,
    nombre     VARCHAR2(50) NOT NULL
);

ALTER TABLE banco ADD CONSTRAINT banco_pk PRIMARY KEY ( id_banco );

CREATE TABLE calificacion (
    id_calificacion        NUMBER(11) NOT NULL,
    nota                   NUMBER(1) NOT NULL,
    reserva_id_reserva     NUMBER(11) NOT NULL,
    usuario_id_usuario     NUMBER(11) NOT NULL,
    tipo_calificacion_id   NUMBER(11) NOT NULL
);

ALTER TABLE calificacion ADD CONSTRAINT calificacion_pk PRIMARY KEY ( id_calificacion );

CREATE TABLE comuna (
    id_comuna   NUMBER(11) NOT NULL,
    nombre      VARCHAR2(50) NOT NULL
);

ALTER TABLE comuna ADD CONSTRAINT comuna_pk PRIMARY KEY ( id_comuna );

CREATE TABLE cuenta (
    id_cuenta                    NUMBER(11) NOT NULL,
    numero                       VARCHAR2(30) NOT NULL,
    banco_id_banco               NUMBER(11) NOT NULL,
    tipo_cuenta_id_tipo_cuenta   NUMBER(11) NOT NULL
);

ALTER TABLE cuenta ADD CONSTRAINT cuenta_pk PRIMARY KEY ( id_cuenta );

CREATE TABLE direccion (
    id_direccion       NUMBER(11) NOT NULL,
    calle              VARCHAR2(100) NOT NULL,
    numeracion         NUMBER(11) NOT NULL,
    latitud            FLOAT NOT NULL,
    longitud           FLOAT NOT NULL,
    comuna_id_comuna   NUMBER(11) NOT NULL
);

ALTER TABLE direccion ADD CONSTRAINT direccion_pk PRIMARY KEY ( id_direccion );

CREATE TABLE est_estacionamiento (
    id_estado   NUMBER(11) NOT NULL,
    nombre      VARCHAR2(50) NOT NULL
);

ALTER TABLE est_estacionamiento ADD CONSTRAINT est_estacionamiento_pk PRIMARY KEY ( id_estado );

CREATE TABLE est_pago (
    id_estado   NUMBER(11) NOT NULL,
    nombre      VARCHAR2(50) NOT NULL
);

ALTER TABLE est_pago ADD CONSTRAINT est_pago_pk PRIMARY KEY ( id_estado );

CREATE TABLE est_usuario (
    id_estado   NUMBER(11) NOT NULL,
    nombre      VARCHAR2(50) NOT NULL
);

ALTER TABLE est_usuario ADD CONSTRAINT est_usuario_pk PRIMARY KEY ( id_estado );

CREATE TABLE estacionamiento (
    id_estacionamiento       NUMBER(11) NOT NULL,
    identificador            VARCHAR2(255) NOT NULL,
    usuario_id_usuario       NUMBER(11) NOT NULL,
    direccion_id_direccion   NUMBER(11) NOT NULL,
    est_estacionamiento_id   NUMBER(11) NOT NULL,
    tipo_apertura_id         NUMBER(11) NOT NULL,
    tarifa_activa_id         NUMBER(11) NOT NULL,
    horario_inicio           NUMBER(2) NOT NULL,
    horario_fin              NUMBER(2) NOT NULL
);

CREATE UNIQUE INDEX estacionamiento__idx ON
    estacionamiento ( tarifa_activa_id ASC );

ALTER TABLE estacionamiento ADD CONSTRAINT estacionamiento_pk PRIMARY KEY ( id_estacionamiento );

CREATE TABLE reserva (
    id_reserva           NUMBER(11) NOT NULL,
    tiempo_inicio        DATE NOT NULL,
    tiempo_fin           DATE,
    estacionamiento_id   NUMBER(11) NOT NULL,
    usuario_id_usuario   NUMBER(11) NOT NULL,
    monto_tarifa         NUMBER(11),
    minutos_usados       NUMBER(11),
    total                NUMBER(11),
    est_pago_id_estado   NUMBER(11) NOT NULL,
    vehiculo_id          NUMBER(11) NOT NULL
);

ALTER TABLE reserva ADD CONSTRAINT reserva_pk PRIMARY KEY ( id_reserva );

CREATE TABLE rol (
    id_rol   NUMBER(11) NOT NULL,
    nombre   VARCHAR2(50) NOT NULL
);

ALTER TABLE rol ADD CONSTRAINT rol_pk PRIMARY KEY ( id_rol );

CREATE TABLE tarifa (
    id_tarifa            NUMBER(11) NOT NULL,
    monto                NUMBER(11) NOT NULL,
    tipo_tarifa_id       NUMBER(11) NOT NULL,
    estacionamiento_id   NUMBER(11) NOT NULL
);

ALTER TABLE tarifa ADD CONSTRAINT tarifa_pk PRIMARY KEY ( id_tarifa );

CREATE TABLE tarifa_activa (
    id_tarifa_activa   NUMBER(11) NOT NULL,
    tipo_tarifa_id     NUMBER(11) NOT NULL
);

CREATE UNIQUE INDEX tarifa_activa__idxv1 ON
    tarifa_activa ( tipo_tarifa_id ASC );

ALTER TABLE tarifa_activa ADD CONSTRAINT tarifa_activa_pk PRIMARY KEY ( id_tarifa_activa );

CREATE TABLE tarjeta (
    id_tarjeta   NUMBER(11) NOT NULL,
    numero       FLOAT(16) NOT NULL,
    dv           NUMBER(3) NOT NULL,
    mes_venc     NUMBER(2) NOT NULL,
    ano_venc     NUMBER(2) NOT NULL
);

ALTER TABLE tarjeta ADD CONSTRAINT tarjeta_pk PRIMARY KEY ( id_tarjeta );

CREATE TABLE tipo_apertura (
    id_tipo_apertura   NUMBER(11) NOT NULL,
    nombre             VARCHAR2(50) NOT NULL
);

ALTER TABLE tipo_apertura ADD CONSTRAINT tipo_apertura_pk PRIMARY KEY ( id_tipo_apertura );

CREATE TABLE tipo_calificacion (
    id_tipo_calificacion   NUMBER(11) NOT NULL,
    nombre                 VARCHAR2(50) NOT NULL
);

ALTER TABLE tipo_calificacion ADD CONSTRAINT tipo_calificacion_pk PRIMARY KEY ( id_tipo_calificacion );

CREATE TABLE tipo_cuenta (
    id_tipo_cuenta   NUMBER(11) NOT NULL,
    nombre           VARCHAR2(50) NOT NULL
);

ALTER TABLE tipo_cuenta ADD CONSTRAINT tipo_cuenta_pk PRIMARY KEY ( id_tipo_cuenta );

CREATE TABLE tipo_tarifa (
    id_tipo_tarifa   NUMBER(11) NOT NULL,
    nombre           VARCHAR2(50) NOT NULL
);

ALTER TABLE tipo_tarifa ADD CONSTRAINT tipo_tarifa_pk PRIMARY KEY ( id_tipo_tarifa );

CREATE TABLE usuario (
    id_usuario              NUMBER(11) NOT NULL,
    nombre                  VARCHAR2(50) NOT NULL,
    rut                     NUMBER(8) NOT NULL,
    dv                      VARCHAR2(1) NOT NULL,
    ape_paterno             VARCHAR2(50) NOT NULL,
    ape_materno             VARCHAR2(50) NOT NULL,
    email                   VARCHAR2(255) NOT NULL,
    telefono                VARCHAR2(12) NOT NULL,
    password                VARCHAR2(255) NOT NULL,
    rol_id_rol              NUMBER(11) NOT NULL,
    est_usuario_id_estado   NUMBER(11) NOT NULL,
    cuenta_id_cuenta        NUMBER(11),
    tarjeta_id_tarjeta      NUMBER(11)
);

CREATE UNIQUE INDEX usuario__idx ON
    usuario ( tarjeta_id_tarjeta ASC );

ALTER TABLE usuario ADD CONSTRAINT usuario_pk PRIMARY KEY ( id_usuario );

CREATE TABLE usuario_vehiculo_fk (
    usuario_id_usuario     NUMBER(11) NOT NULL,
    vehiculo_id_vehiculo   NUMBER(11) NOT NULL
);

ALTER TABLE usuario_vehiculo_fk ADD CONSTRAINT usuario_vehiculo_fk_pk PRIMARY KEY ( usuario_id_usuario,
vehiculo_id_vehiculo );

CREATE TABLE vehiculo (
    id_vehiculo   NUMBER(11) NOT NULL,
    patente       VARCHAR2(7) NOT NULL
);

ALTER TABLE vehiculo ADD CONSTRAINT vehiculo_pk PRIMARY KEY ( id_vehiculo );

ALTER TABLE calificacion
    ADD CONSTRAINT calificacion_reserva_fk FOREIGN KEY ( reserva_id_reserva )
        REFERENCES reserva ( id_reserva );

ALTER TABLE calificacion
    ADD CONSTRAINT calificacion_tipo_fk FOREIGN KEY ( tipo_calificacion_id )
        REFERENCES tipo_calificacion ( id_tipo_calificacion );

ALTER TABLE calificacion
    ADD CONSTRAINT calificacion_usuario_fk FOREIGN KEY ( usuario_id_usuario )
        REFERENCES usuario ( id_usuario );

ALTER TABLE cuenta
    ADD CONSTRAINT cuenta_banco_fk FOREIGN KEY ( banco_id_banco )
        REFERENCES banco ( id_banco );

ALTER TABLE cuenta
    ADD CONSTRAINT cuenta_tipo_cuenta_fk FOREIGN KEY ( tipo_cuenta_id_tipo_cuenta )
        REFERENCES tipo_cuenta ( id_tipo_cuenta );

ALTER TABLE direccion
    ADD CONSTRAINT direccion_comuna_fk FOREIGN KEY ( comuna_id_comuna )
        REFERENCES comuna ( id_comuna );

ALTER TABLE estacionamiento
    ADD CONSTRAINT estaciona_t_apertura_fk FOREIGN KEY ( tipo_apertura_id )
        REFERENCES tipo_apertura ( id_tipo_apertura );

ALTER TABLE estacionamiento
    ADD CONSTRAINT estaciona_tar_activa_fk FOREIGN KEY ( tarifa_activa_id )
        REFERENCES tarifa_activa ( id_tarifa_activa );

ALTER TABLE estacionamiento
    ADD CONSTRAINT estacionamiento_direccion_fk FOREIGN KEY ( direccion_id_direccion )
        REFERENCES direccion ( id_direccion );

ALTER TABLE estacionamiento
    ADD CONSTRAINT estacionamiento_estado_fk FOREIGN KEY ( est_estacionamiento_id )
        REFERENCES est_estacionamiento ( id_estado );

ALTER TABLE estacionamiento
    ADD CONSTRAINT estacionamiento_usuario_fk FOREIGN KEY ( usuario_id_usuario )
        REFERENCES usuario ( id_usuario );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_est_pago_fk FOREIGN KEY ( est_pago_id_estado )
        REFERENCES est_pago ( id_estado );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_estacionamiento_fk FOREIGN KEY ( estacionamiento_id )
        REFERENCES estacionamiento ( id_estacionamiento );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_usuario_fk FOREIGN KEY ( usuario_id_usuario )
        REFERENCES usuario ( id_usuario );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_vehiculo_fk FOREIGN KEY ( vehiculo_id )
        REFERENCES vehiculo ( id_vehiculo );

ALTER TABLE tarifa_activa
    ADD CONSTRAINT tarifa_activa_tipo_tarifa_fk FOREIGN KEY ( tipo_tarifa_id )
        REFERENCES tipo_tarifa ( id_tipo_tarifa );

ALTER TABLE tarifa
    ADD CONSTRAINT tarifa_estacionamiento_fk FOREIGN KEY ( estacionamiento_id )
        REFERENCES estacionamiento ( id_estacionamiento );

ALTER TABLE tarifa
    ADD CONSTRAINT tarifa_tipo_tarifa_fk FOREIGN KEY ( tipo_tarifa_id )
        REFERENCES tipo_tarifa ( id_tipo_tarifa );

ALTER TABLE usuario
    ADD CONSTRAINT usuario_cuenta_fk FOREIGN KEY ( cuenta_id_cuenta )
        REFERENCES cuenta ( id_cuenta );

ALTER TABLE usuario
    ADD CONSTRAINT usuario_est_usuario_fk FOREIGN KEY ( est_usuario_id_estado )
        REFERENCES est_usuario ( id_estado );

ALTER TABLE usuario
    ADD CONSTRAINT usuario_rol_fk FOREIGN KEY ( rol_id_rol )
        REFERENCES rol ( id_rol );

ALTER TABLE usuario
    ADD CONSTRAINT usuario_tarjeta_fk FOREIGN KEY ( tarjeta_id_tarjeta )
        REFERENCES tarjeta ( id_tarjeta );

ALTER TABLE usuario_vehiculo_fk
    ADD CONSTRAINT usuario_vehiculo_fk FOREIGN KEY ( vehiculo_id_vehiculo )
        REFERENCES vehiculo ( id_vehiculo );

ALTER TABLE usuario_vehiculo_fk
    ADD CONSTRAINT usuario_vehiculo_fk2 FOREIGN KEY ( usuario_id_usuario )
        REFERENCES usuario ( id_usuario );



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            21
-- CREATE INDEX                             3
-- ALTER TABLE                             45
-- ERRORS                                   0
-- WARNINGS                                 0

-------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------
-- SECUENCIAS
-------------------------------------------------------------------------------------------------------------------------------

CREATE SEQUENCE SEQ_BANCO
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;


CREATE SEQUENCE SEQ_CALIFICACION
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;


CREATE SEQUENCE SEQ_COMUNA
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;


CREATE SEQUENCE SEQ_CUENTA
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;



CREATE SEQUENCE SEQ_DIRECCION
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;



CREATE SEQUENCE SEQ_EST_ESTACIONAMIENTO
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;



CREATE SEQUENCE SEQ_EST_PAGO
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;



CREATE SEQUENCE SEQ_EST_USUARIO
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;


CREATE SEQUENCE SEQ_ESTACIONAMIENTO
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;



CREATE SEQUENCE SEQ_RESERVA
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;



CREATE SEQUENCE SEQ_ROL
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;



CREATE SEQUENCE SEQ_TARIFA
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;


CREATE SEQUENCE SEQ_TARIFA_ACTIVA
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;


CREATE SEQUENCE SEQ_TARJETA
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;


CREATE SEQUENCE SEQ_TIPO_APERTURA
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;



CREATE SEQUENCE SEQ_TIPO_CALIFICACION
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;


CREATE SEQUENCE SEQ_TIPO_CUENTA
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;



CREATE SEQUENCE SEQ_TIPO_TARIFA
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;


CREATE SEQUENCE SEQ_USUARIO
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;


CREATE SEQUENCE SEQ_USUARIO_VEHICULO_FK
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;



CREATE SEQUENCE SEQ_VEHICULO
    START WITH 100
    INCREMENT BY 1
    MINVALUE 1
    NOCYCLE;
-------------------------------------------------------------------------------------------------------------------------------












-------------------------------------------------------------------------------------------------------------------------------
-- 	SEMILLAS
-------------------------------------------------------------------------------------------------------------------------------
-- ROL
INSERT INTO ROL(ID_ROL,NOMBRE) VALUES (1,'Administrador');
INSERT INTO ROL(ID_ROL,NOMBRE) VALUES (2,'Cliente');
INSERT INTO ROL(ID_ROL,NOMBRE) VALUES (3,'Dueño');


-- COMUNA
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (1,'Cerrillos');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (2,'Cerro Navia');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (3,'Conchalí');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (4,'El Bosque');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (5,'Estación Central');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (6,'Huechuraba');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (7,'Independencia');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (8,'La Cisterna');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (9,'La Florida');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (10,'La Granja');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (11,'La Pintana');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (12,'La Reina');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (13,'Las Condes');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (14,'Lo Barnechea');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (15,'Lo Espejo');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (16,'Lo Prado');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (17,'Macul');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (18,'Maipú');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (19,'Ñuñoa');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (20,'Padre Hurtado');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (21,'Pedro Aguirre Cerda');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (22,'Peñalolén');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (23,'Providencia');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (24,'Pudahuel');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (25,'Puente Alto');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (26,'Quilicura');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (27,'Quinta Normal');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (28,'Recoleta');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (29,'Renca');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (30,'San Bernardo');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (31,'San Joaquín');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (32,'San Miguel');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (33,'San Ramón');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (34,'Santiago');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (35,'Vitacura');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (36,'Colina');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (37,'Lampa');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (38,'Buin');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (39,'Peñaflor');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (40,'Talagante');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (41,'Paine');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (42,'Isla de Maipo');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (43,'El Monte');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (44,'Pirque');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (45,'Calera de Tango');
INSERT INTO COMUNA(ID_COMUNA,NOMBRE) VALUES (46,'San José de Maipo');


-- EST_USUARIO
INSERT INTO EST_USUARIO(ID_ESTADO,NOMBRE) VALUES (1,'Habilitado');
INSERT INTO EST_USUARIO(ID_ESTADO,NOMBRE) VALUES (2,'Deshabilitado');


-- EST_ESTACIONAMIENTO
INSERT INTO EST_ESTACIONAMIENTO(ID_ESTADO,NOMBRE) VALUES (1,'Habilitado');
INSERT INTO EST_ESTACIONAMIENTO(ID_ESTADO,NOMBRE) VALUES (2,'Deshabilitado');


-- TIPO_APERTURA
INSERT INTO TIPO_APERTURA(ID_TIPO_APERTURA,NOMBRE) VALUES (1,'Remota');
INSERT INTO TIPO_APERTURA(ID_TIPO_APERTURA,NOMBRE) VALUES (2,'Manual');


-- TIPO_CUENTA
INSERT INTO TIPO_CUENTA(ID_TIPO_CUENTA,NOMBRE) VALUES (1,'Cuenta Corriente');
INSERT INTO TIPO_CUENTA(ID_TIPO_CUENTA,NOMBRE) VALUES (2,'Cuenta Vista');
INSERT INTO TIPO_CUENTA(ID_TIPO_CUENTA,NOMBRE) VALUES (3,'Cuenta de Ahorro');



-- BANCO
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (1,'Banco Estado');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (2,'Banco de Chile');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (3,'Banco Internacional');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (4,'Scotiabank-Desarrollo');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (5,'Banco de Creditos e Inversiones');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (6,'Corp-Banca');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (7,'BICE');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (8,'HSBC Bank Chile');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (9,'Banco Santander');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (10,'Banco Itau');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (11,'MUFG Bank, LTD.');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (12,'Banco Security');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (13,'Banco Falabella');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (14,'Banco Ripley');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (15,'Banco Consorcio');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (16,'Banco Paris');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (17,'Banco BBVA');
INSERT INTO BANCO(ID_BANCO,NOMBRE) VALUES (18,'COOPEUCH');


-- TIPO_CALIFICACION
INSERT INTO TIPO_CALIFICACION(ID_TIPO_CALIFICACION,NOMBRE) VALUES (1,'Cliente');
INSERT INTO TIPO_CALIFICACION(ID_TIPO_CALIFICACION,NOMBRE) VALUES (2,'Dueño');




-- EST_PAGO
INSERT INTO EST_PAGO(ID_ESTADO,NOMBRE) VALUES (1,'Pendiente');
INSERT INTO EST_PAGO(ID_ESTADO,NOMBRE) VALUES (2,'Pagado');



-- TIPO_TARIFA
INSERT INTO TIPO_TARIFA(ID_TIPO_TARIFA,NOMBRE) VALUES (1,'Tarifa Minuto');
INSERT INTO TIPO_TARIFA(ID_TIPO_TARIFA,NOMBRE) VALUES (2,'Tarifa Generica');


----- USUARIO DE PRUEBA -----
-- user: gonzalo@gmail.com
-- pass: 123
---------------------
-- CUENTA
INSERT INTO CUENTA(ID_CUENTA,NUMERO,BANCO_ID_BANCO,TIPO_CUENTA_ID_TIPO_CUENTA) 
VALUES (1,18060399,1,2);

-- TARJETA
INSERT INTO TARJETA(ID_TARJETA,NUMERO,DV,MES_VENC,ANO_VENC) 
VALUES (1,00180603999,279,02,23);

-- USUARIO
INSERT INTO USUARIO(ID_USUARIO, NOMBRE, RUT, DV, APE_PATERNO, APE_MATERNO, EMAIL, TELEFONO, PASSWORD, ROL_ID_ROL, EST_USUARIO_ID_ESTADO, CUENTA_ID_CUENTA, TARJETA_ID_TARJETA) 
VALUES (1,'Gonzalo',18060399,'9','Peñaloza','Vargas','gonzalo@gmail.com','+56990515860','40bd001563085fc35165329ea1ff5c5ecbdbbeef',1,1,1,1);
----- ------

-------------------------------------------------------------------------------------------------------------------------------











-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-- PACKAGE's
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------
-- USUARIO_PKG
-------------------------------------------------------------------------------------------------------------------------------

create or replace PACKAGE USUARIO_PKG AS 


  PROCEDURE SP_MOSTRAR_USUARIO(P_ID_USUARIO USUARIO.ID_USUARIO%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_USUARIO(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_USUARIO(  P_NOMBRE USUARIO.NOMBRE%TYPE, 
                                  P_RUT USUARIO.RUT%TYPE,
                                  P_DV USUARIO.DV%TYPE,
                                  P_APE_PATERNO USUARIO.APE_PATERNO%TYPE, 
                                  P_APE_MATERNO USUARIO.APE_MATERNO%TYPE, 
                                  P_EMAIL USUARIO.EMAIL%TYPE, 
                                  P_TELEFONO USUARIO.TELEFONO%TYPE, 
                                  P_PASSWORD USUARIO.PASSWORD%TYPE, 
                                  P_ROL_ID_ROL USUARIO.ROL_ID_ROL%TYPE, 
                                  P_EST_USUARIO_ID_ESTADO USUARIO.EST_USUARIO_ID_ESTADO%TYPE,
                                  P_CUENTA_ID_CUENTA USUARIO.CUENTA_ID_CUENTA%TYPE,
                                  P_TARJETA_ID_TARJETA USUARIO.TARJETA_ID_TARJETA%TYPE);

  PROCEDURE SP_ELIMINAR_USUARIO(P_ID_USUARIO USUARIO.ID_USUARIO%TYPE);

  PROCEDURE SP_MODIFICAR_USUARIO( P_ID_USUARIO USUARIO.ID_USUARIO%TYPE, 
                                  P_NOMBRE USUARIO.NOMBRE%TYPE, 
                                  P_RUT USUARIO.RUT%TYPE,
                                  P_DV USUARIO.DV%TYPE, 
                                  P_APE_PATERNO USUARIO.APE_PATERNO%TYPE, 
                                  P_APE_MATERNO USUARIO.APE_MATERNO%TYPE, 
                                  P_EMAIL USUARIO.EMAIL%TYPE, 
                                  P_TELEFONO USUARIO.TELEFONO%TYPE, 
                                  P_PASSWORD USUARIO.PASSWORD%TYPE, 
                                  P_ROL_ID_ROL USUARIO.ROL_ID_ROL%TYPE, 
                                  P_EST_USUARIO_ID_ESTADO USUARIO.EST_USUARIO_ID_ESTADO%TYPE,
                                  P_CUENTA_ID_CUENTA USUARIO.CUENTA_ID_CUENTA%TYPE,
                                  P_TARJETA_ID_TARJETA USUARIO.TARJETA_ID_TARJETA%TYPE);

  -- VALIDACION DE CREDENCIALES PARA AUTENTICACION
  PROCEDURE SP_VALIDAR_USUARIO( P_EMAIL USUARIO.EMAIL%TYPE,
                                P_PASSWORD USUARIO.PASSWORD%TYPE, 
                                PCURSOR OUT SYS_REFCURSOR);
  -- VALIDACION DE EMAIL PARA REGISTRO
  PROCEDURE SP_VALIDAR_EMAIL_USUARIO( P_EMAIL USUARIO.EMAIL%TYPE,
                                     PCURSOR OUT SYS_REFCURSOR);
END USUARIO_PKG;
-------------------------------------------------------------------------------------------------------------------------------











-------------------------------------------------------------------------------------------------------------------------------
-- USUARIO_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE BODY USUARIO_PKG AS

  PROCEDURE SP_MOSTRAR_USUARIO(P_ID_USUARIO USUARIO.ID_USUARIO%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_USUARIO, NOMBRE, RUT, DV, APE_PATERNO, APE_MATERNO, EMAIL, TELEFONO, PASSWORD, ROL_ID_ROL, EST_USUARIO_ID_ESTADO, CUENTA_ID_CUENTA, TARJETA_ID_TARJETA
      FROM USUARIO
      WHERE ID_USUARIO = P_ID_USUARIO;
  END SP_MOSTRAR_USUARIO;


  PROCEDURE SP_TODOS_USUARIO(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_USUARIO, NOMBRE, RUT, DV, APE_PATERNO, APE_MATERNO, EMAIL, TELEFONO, PASSWORD, ROL_ID_ROL, EST_USUARIO_ID_ESTADO, CUENTA_ID_CUENTA, TARJETA_ID_TARJETA
      FROM USUARIO;
  END SP_TODOS_USUARIO;


  PROCEDURE SP_INSERTAR_USUARIO(  P_NOMBRE USUARIO.NOMBRE%TYPE, 
                                  P_RUT USUARIO.RUT%TYPE,
                                  P_DV USUARIO.DV%TYPE,
                                  P_APE_PATERNO USUARIO.APE_PATERNO%TYPE, 
                                  P_APE_MATERNO USUARIO.APE_MATERNO%TYPE, 
                                  P_EMAIL USUARIO.EMAIL%TYPE, 
                                  P_TELEFONO USUARIO.TELEFONO%TYPE, 
                                  P_PASSWORD USUARIO.PASSWORD%TYPE, 
                                  P_ROL_ID_ROL USUARIO.ROL_ID_ROL%TYPE, 
                                  P_EST_USUARIO_ID_ESTADO USUARIO.EST_USUARIO_ID_ESTADO%TYPE,
                                  P_CUENTA_ID_CUENTA USUARIO.CUENTA_ID_CUENTA%TYPE,
                                  P_TARJETA_ID_TARJETA USUARIO.TARJETA_ID_TARJETA%TYPE) IS
  BEGIN
    INSERT INTO USUARIO(ID_USUARIO, NOMBRE, RUT, DV, APE_PATERNO, APE_MATERNO, EMAIL, TELEFONO, PASSWORD, ROL_ID_ROL, EST_USUARIO_ID_ESTADO, CUENTA_ID_CUENTA, TARJETA_ID_TARJETA)
    VALUES (SEQ_USUARIO.NEXTVAL, P_NOMBRE, P_RUT, P_DV, P_APE_PATERNO, P_APE_MATERNO, P_EMAIL, P_TELEFONO, P_PASSWORD, P_ROL_ID_ROL, P_EST_USUARIO_ID_ESTADO, P_CUENTA_ID_CUENTA, P_TARJETA_ID_TARJETA);
  END SP_INSERTAR_USUARIO;

  PROCEDURE SP_ELIMINAR_USUARIO(P_ID_USUARIO USUARIO.ID_USUARIO%TYPE) IS
  BEGIN
    DELETE FROM USUARIO
    WHERE ID_USUARIO = P_ID_USUARIO;
  END SP_ELIMINAR_USUARIO;     

  PROCEDURE SP_MODIFICAR_USUARIO( P_ID_USUARIO USUARIO.ID_USUARIO%TYPE, 
                                  P_NOMBRE USUARIO.NOMBRE%TYPE, 
                                  P_RUT USUARIO.RUT%TYPE,
                                  P_DV USUARIO.DV%TYPE, 
                                  P_APE_PATERNO USUARIO.APE_PATERNO%TYPE, 
                                  P_APE_MATERNO USUARIO.APE_MATERNO%TYPE, 
                                  P_EMAIL USUARIO.EMAIL%TYPE, 
                                  P_TELEFONO USUARIO.TELEFONO%TYPE, 
                                  P_PASSWORD USUARIO.PASSWORD%TYPE, 
                                  P_ROL_ID_ROL USUARIO.ROL_ID_ROL%TYPE, 
                                  P_EST_USUARIO_ID_ESTADO USUARIO.EST_USUARIO_ID_ESTADO%TYPE,
                                  P_CUENTA_ID_CUENTA USUARIO.CUENTA_ID_CUENTA%TYPE,
                                  P_TARJETA_ID_TARJETA USUARIO.TARJETA_ID_TARJETA%TYPE) IS
  BEGIN
    UPDATE USUARIO
    SET NOMBRE = P_NOMBRE,
        RUT = P_RUT,
        DV = P_DV,
        APE_PATERNO = P_APE_PATERNO,
        APE_MATERNO = P_APE_MATERNO,
        EMAIL = P_EMAIL,
        TELEFONO = P_TELEFONO,
        PASSWORD = P_PASSWORD,
        ROL_ID_ROL = P_ROL_ID_ROL,
        EST_USUARIO_ID_ESTADO = P_EST_USUARIO_ID_ESTADO,
        CUENTA_ID_CUENTA = P_CUENTA_ID_CUENTA,
        TARJETA_ID_TARJETA = P_TARJETA_ID_TARJETA
    WHERE ID_USUARIO = P_ID_USUARIO;
  END SP_MODIFICAR_USUARIO;

  -- VALIDACION DE CREDENCIALES PARA AUTENTICACION
  PROCEDURE SP_VALIDAR_USUARIO( P_EMAIL USUARIO.EMAIL%TYPE,
                                P_PASSWORD USUARIO.PASSWORD%TYPE, 
                                PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_USUARIO, NOMBRE, RUT, DV, APE_PATERNO, APE_MATERNO, EMAIL, TELEFONO, PASSWORD, ROL_ID_ROL, EST_USUARIO_ID_ESTADO, CUENTA_ID_CUENTA, TARJETA_ID_TARJETA
      FROM USUARIO
      WHERE EMAIL = P_EMAIL;
      --AND PASSWORD = P_PASSWORD;
  END SP_VALIDAR_USUARIO;

  -- VALIDACION DE EMAIL PARA REGISTRO
  PROCEDURE SP_VALIDAR_EMAIL_USUARIO( P_EMAIL USUARIO.EMAIL%TYPE,
                                      PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_USUARIO, NOMBRE, RUT, DV, APE_PATERNO, APE_MATERNO, EMAIL, TELEFONO, PASSWORD, ROL_ID_ROL, EST_USUARIO_ID_ESTADO, CUENTA_ID_CUENTA, TARJETA_ID_TARJETA
      FROM USUARIO
      WHERE EMAIL = P_EMAIL;
  END SP_VALIDAR_EMAIL_USUARIO;


END USUARIO_PKG;
-------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------
-- BANCO_PKG
-------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE BANCO_PKG AS 

  PROCEDURE SP_MOSTRAR_BANCO(P_ID_BANCO BANCO.ID_BANCO%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_BANCO(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_BANCO(P_NOMBRE BANCO.NOMBRE%TYPE);

  PROCEDURE SP_ELIMINAR_BANCO(P_ID_BANCO BANCO.ID_BANCO%TYPE);

  PROCEDURE SP_MODIFICAR_BANCO( P_ID_BANCO BANCO.ID_BANCO%TYPE, P_NOMBRE BANCO.NOMBRE%TYPE);

END BANCO_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- BANCO_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE BODY BANCO_PKG AS
  PROCEDURE SP_MOSTRAR_BANCO(P_ID_BANCO BANCO.ID_BANCO%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_BANCO, NOMBRE
      FROM BANCO
      WHERE ID_BANCO = P_ID_BANCO;
  END SP_MOSTRAR_BANCO;

  PROCEDURE SP_TODOS_BANCO(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_BANCO, NOMBRE
      FROM BANCO;
  END SP_TODOS_BANCO;

  PROCEDURE SP_INSERTAR_BANCO(P_NOMBRE BANCO.NOMBRE%TYPE) IS
  BEGIN
    INSERT INTO BANCO(ID_BANCO, NOMBRE)
    VALUES (SEQ_BANCO.NEXTVAL, P_NOMBRE);
  END SP_INSERTAR_BANCO;

  PROCEDURE SP_ELIMINAR_BANCO(P_ID_BANCO BANCO.ID_BANCO%TYPE) IS
  BEGIN
    DELETE FROM BANCO
    WHERE ID_BANCO = P_ID_BANCO;
  END SP_ELIMINAR_BANCO;     

  PROCEDURE SP_MODIFICAR_BANCO( P_ID_BANCO BANCO.ID_BANCO%TYPE, 
                                P_NOMBRE BANCO.NOMBRE%TYPE) IS
  BEGIN
    UPDATE BANCO
    SET NOMBRE = P_NOMBRE
    WHERE ID_BANCO = P_ID_BANCO;
  END SP_MODIFICAR_BANCO;
END BANCO_PKG;
-------------------------------------------------------------------------------------------------------------------------------








-------------------------------------------------------------------------------------------------------------------------------
-- ROL_PKG
-------------------------------------------------------------------------------------------------------------------------------

create or replace PACKAGE ROL_PKG AS 

  PROCEDURE SP_MOSTRAR_ROL(P_ID_ROL ROL.ID_ROL%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_ROL(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_ROL(P_NOMBRE ROL.NOMBRE%TYPE);

  PROCEDURE SP_ELIMINAR_ROL(P_ID_ROL ROL.ID_ROL%TYPE);

  PROCEDURE SP_MODIFICAR_ROL( P_ID_ROL ROL.ID_ROL%TYPE, P_NOMBRE ROL.NOMBRE%TYPE);

END ROL_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- ROL_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE BODY ROL_PKG AS

  PROCEDURE SP_MOSTRAR_ROL(P_ID_ROL ROL.ID_ROL%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_ROL, NOMBRE
      FROM ROL
      WHERE ID_ROL = P_ID_ROL;
  END SP_MOSTRAR_ROL;

  PROCEDURE SP_TODOS_ROL(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_ROL, NOMBRE
      FROM ROL;
  END SP_TODOS_ROL;

  PROCEDURE SP_INSERTAR_ROL(P_NOMBRE ROL.NOMBRE%TYPE) IS
  BEGIN
    INSERT INTO ROL(ID_ROL, NOMBRE)
    VALUES (SEQ_ROL.NEXTVAL, P_NOMBRE);
  END SP_INSERTAR_ROL;

  PROCEDURE SP_ELIMINAR_ROL(P_ID_ROL ROL.ID_ROL%TYPE) IS
  BEGIN
    DELETE FROM ROL
    WHERE ID_ROL = P_ID_ROL;
  END SP_ELIMINAR_ROL;     

  PROCEDURE SP_MODIFICAR_ROL( P_ID_ROL ROL.ID_ROL%TYPE, 
                                P_NOMBRE ROL.NOMBRE%TYPE) IS
  BEGIN
    UPDATE ROL
    SET NOMBRE = P_NOMBRE
    WHERE ID_ROL = P_ID_ROL;
  END SP_MODIFICAR_ROL;

END ROL_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- CALIFICACION_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE CALIFICACION_PKG AS 

  PROCEDURE SP_MOSTRAR_CALIFICACION(P_ID_CALIFICACION CALIFICACION.ID_CALIFICACION%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_CALIFICACION(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_CALIFICACION(   P_NOTA CALIFICACION.NOTA%TYPE,
                                        P_RESERVA_ID_RESERVA CALIFICACION.RESERVA_ID_RESERVA%TYPE,
                                        P_USUARIO_ID_USUARIO CALIFICACION.USUARIO_ID_USUARIO%TYPE,
                                        P_TIPO_CALIFICACION_ID CALIFICACION.TIPO_CALIFICACION_ID%TYPE);

  PROCEDURE SP_ELIMINAR_CALIFICACION(P_ID_CALIFICACION CALIFICACION.ID_CALIFICACION%TYPE);

  PROCEDURE SP_MODIFICAR_CALIFICACION(  P_ID_CALIFICACION CALIFICACION.ID_CALIFICACION%TYPE,
                                        P_NOTA CALIFICACION.NOTA%TYPE,
                                        P_RESERVA_ID_RESERVA CALIFICACION.RESERVA_ID_RESERVA%TYPE,
                                        P_USUARIO_ID_USUARIO CALIFICACION.USUARIO_ID_USUARIO%TYPE,
                                        P_TIPO_CALIFICACION_ID CALIFICACION.TIPO_CALIFICACION_ID%TYPE);

END CALIFICACION_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- CALIFICACION_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY CALIFICACION_PKG AS


  PROCEDURE SP_MOSTRAR_CALIFICACION(P_ID_CALIFICACION CALIFICACION.ID_CALIFICACION%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_CALIFICACION, NOTA, RESERVA_ID_RESERVA, USUARIO_ID_USUARIO, TIPO_CALIFICACION_ID
      FROM CALIFICACION
      WHERE ID_CALIFICACION = P_ID_CALIFICACION;
  END SP_MOSTRAR_CALIFICACION;


  PROCEDURE SP_TODOS_CALIFICACION(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_CALIFICACION, NOTA, RESERVA_ID_RESERVA, USUARIO_ID_USUARIO, TIPO_CALIFICACION_ID
      FROM CALIFICACION;
  END SP_TODOS_CALIFICACION;


  PROCEDURE SP_INSERTAR_CALIFICACION(   P_NOTA CALIFICACION.NOTA%TYPE,
                                        P_RESERVA_ID_RESERVA CALIFICACION.RESERVA_ID_RESERVA%TYPE,
                                        P_USUARIO_ID_USUARIO CALIFICACION.USUARIO_ID_USUARIO%TYPE,
                                        P_TIPO_CALIFICACION_ID CALIFICACION.TIPO_CALIFICACION_ID%TYPE) IS
  BEGIN
    INSERT INTO CALIFICACION(ID_CALIFICACION, NOTA, RESERVA_ID_RESERVA, USUARIO_ID_USUARIO, TIPO_CALIFICACION_ID)
    VALUES (SEQ_CALIFICACION.NEXTVAL, P_NOTA, P_RESERVA_ID_RESERVA, P_USUARIO_ID_USUARIO, P_TIPO_CALIFICACION_ID);
  END SP_INSERTAR_CALIFICACION;


  PROCEDURE SP_ELIMINAR_CALIFICACION(P_ID_CALIFICACION CALIFICACION.ID_CALIFICACION%TYPE) IS
  BEGIN
    DELETE FROM CALIFICACION
    WHERE ID_CALIFICACION = P_ID_CALIFICACION;
  END SP_ELIMINAR_CALIFICACION;     


  PROCEDURE SP_MODIFICAR_CALIFICACION(  P_ID_CALIFICACION CALIFICACION.ID_CALIFICACION%TYPE, 
                                        P_NOTA CALIFICACION.NOTA%TYPE,
                                        P_RESERVA_ID_RESERVA CALIFICACION.RESERVA_ID_RESERVA%TYPE,
                                        P_USUARIO_ID_USUARIO CALIFICACION.USUARIO_ID_USUARIO%TYPE,
                                        P_TIPO_CALIFICACION_ID CALIFICACION.TIPO_CALIFICACION_ID%TYPE) IS
  BEGIN
    UPDATE CALIFICACION
    SET NOTA = P_NOTA,
        RESERVA_ID_RESERVA = P_RESERVA_ID_RESERVA,
        USUARIO_ID_USUARIO = P_USUARIO_ID_USUARIO,
        TIPO_CALIFICACION_ID = P_TIPO_CALIFICACION_ID
    WHERE ID_CALIFICACION = P_ID_CALIFICACION;
  END SP_MODIFICAR_CALIFICACION;

END CALIFICACION_PKG;
-------------------------------------------------------------------------------------------------------------------------------











-------------------------------------------------------------------------------------------------------------------------------
-- TARIFA_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE TARIFA_PKG AS 

  PROCEDURE SP_MOSTRAR_TARIFA(P_ID_TARIFA TARIFA.ID_TARIFA%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_TARIFA(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_TARIFA( P_MONTO TARIFA.MONTO%TYPE,
                                P_TIPO_TARIFA_ID TARIFA.TIPO_TARIFA_ID%TYPE,
                                P_ESTACIONAMIENTO_ID TARIFA.ESTACIONAMIENTO_ID%TYPE);

  PROCEDURE SP_ELIMINAR_TARIFA(P_ID_TARIFA TARIFA.ID_TARIFA%TYPE);

  PROCEDURE SP_MODIFICAR_TARIFA(P_ID_TARIFA TARIFA.ID_TARIFA%TYPE,
                                P_MONTO TARIFA.MONTO%TYPE,
                                P_TIPO_TARIFA_ID TARIFA.TIPO_TARIFA_ID%TYPE,
                                P_ESTACIONAMIENTO_ID TARIFA.ESTACIONAMIENTO_ID%TYPE);

END TARIFA_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- TARIFA_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY TARIFA_PKG AS

  PROCEDURE SP_MOSTRAR_TARIFA(P_ID_TARIFA TARIFA.ID_TARIFA%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TARIFA, MONTO, TIPO_TARIFA_ID, ESTACIONAMIENTO_ID
      FROM TARIFA
      WHERE ID_TARIFA = P_ID_TARIFA;
  END SP_MOSTRAR_TARIFA;

  PROCEDURE SP_TODOS_TARIFA(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TARIFA, MONTO, TIPO_TARIFA_ID, ESTACIONAMIENTO_ID
      FROM TARIFA;
  END SP_TODOS_TARIFA;

  PROCEDURE SP_INSERTAR_TARIFA( P_MONTO TARIFA.MONTO%TYPE,
                                P_TIPO_TARIFA_ID TARIFA.TIPO_TARIFA_ID%TYPE,
                                P_ESTACIONAMIENTO_ID TARIFA.ESTACIONAMIENTO_ID%TYPE) IS
  BEGIN
    INSERT INTO TARIFA(ID_TARIFA,MONTO,TIPO_TARIFA_ID,ESTACIONAMIENTO_ID)
    VALUES (SEQ_TARIFA.NEXTVAL,P_MONTO,P_TIPO_TARIFA_ID,P_ESTACIONAMIENTO_ID);
  END SP_INSERTAR_TARIFA;

  PROCEDURE SP_ELIMINAR_TARIFA(P_ID_TARIFA TARIFA.ID_TARIFA%TYPE) IS
  BEGIN
    DELETE FROM TARIFA
    WHERE ID_TARIFA = P_ID_TARIFA;
  END SP_ELIMINAR_TARIFA;     

  PROCEDURE SP_MODIFICAR_TARIFA(P_ID_TARIFA TARIFA.ID_TARIFA%TYPE, 
                                P_MONTO TARIFA.MONTO%TYPE,
                                P_TIPO_TARIFA_ID TARIFA.TIPO_TARIFA_ID%TYPE,
                                P_ESTACIONAMIENTO_ID TARIFA.ESTACIONAMIENTO_ID%TYPE) IS
  BEGIN
    UPDATE TARIFA
    SET MONTO = P_MONTO,
        TIPO_TARIFA_ID = P_TIPO_TARIFA_ID,
        ESTACIONAMIENTO_ID = P_ESTACIONAMIENTO_ID
    WHERE ID_TARIFA = P_ID_TARIFA;
  END SP_MODIFICAR_TARIFA;

END TARIFA_PKG;
-------------------------------------------------------------------------------------------------------------------------------





-------------------------------------------------------------------------------------------------------------------------------
-- COMUNA_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE COMUNA_PKG AS 

  PROCEDURE SP_MOSTRAR_COMUNA(P_ID_COMUNA COMUNA.ID_COMUNA%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_COMUNA(PCURSOR OUT SYS_REFCURSOR);

END COMUNA_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- COMUNA_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY COMUNA_PKG AS

  PROCEDURE SP_MOSTRAR_COMUNA(P_ID_COMUNA COMUNA.ID_COMUNA%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_COMUNA, NOMBRE
      FROM COMUNA
      WHERE ID_COMUNA = P_ID_COMUNA;
  END SP_MOSTRAR_COMUNA;

  PROCEDURE SP_TODOS_COMUNA(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_COMUNA, NOMBRE
      FROM COMUNA;
  END SP_TODOS_COMUNA;

END COMUNA_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- CUENTA_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE CUENTA_PKG AS 

  PROCEDURE SP_MOSTRAR_CUENTA(P_ID_CUENTA CUENTA.ID_CUENTA%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_CUENTA(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_CUENTA( P_NUMERO CUENTA.NUMERO%TYPE,
                                P_BANCO_ID_BANCO CUENTA.BANCO_ID_BANCO%TYPE,
                                P_TIPO_CUENTA_ID_TIPO_CUENTA CUENTA.TIPO_CUENTA_ID_TIPO_CUENTA%TYPE);

  PROCEDURE SP_ELIMINAR_CUENTA(P_ID_CUENTA CUENTA.ID_CUENTA%TYPE);

  PROCEDURE SP_MODIFICAR_CUENTA(P_ID_CUENTA CUENTA.ID_CUENTA%TYPE,
                                P_NUMERO CUENTA.NUMERO%TYPE,
                                P_BANCO_ID_BANCO CUENTA.BANCO_ID_BANCO%TYPE,
                                P_TIPO_CUENTA_ID_TIPO_CUENTA CUENTA.TIPO_CUENTA_ID_TIPO_CUENTA%TYPE);

END CUENTA_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- CUENTA_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY CUENTA_PKG AS

  PROCEDURE SP_MOSTRAR_CUENTA(P_ID_CUENTA CUENTA.ID_CUENTA%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_CUENTA, NUMERO, BANCO_ID_BANCO, TIPO_CUENTA_ID_TIPO_CUENTA
      FROM CUENTA
      WHERE ID_CUENTA = P_ID_CUENTA;
  END SP_MOSTRAR_CUENTA;

  PROCEDURE SP_TODOS_CUENTA(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_CUENTA, NUMERO, BANCO_ID_BANCO, TIPO_CUENTA_ID_TIPO_CUENTA
      FROM CUENTA;
  END SP_TODOS_CUENTA;

  PROCEDURE SP_INSERTAR_CUENTA( P_NUMERO CUENTA.NUMERO%TYPE,
                                P_BANCO_ID_BANCO CUENTA.BANCO_ID_BANCO%TYPE,
                                P_TIPO_CUENTA_ID_TIPO_CUENTA CUENTA.TIPO_CUENTA_ID_TIPO_CUENTA%TYPE) IS
  BEGIN
    INSERT INTO CUENTA(ID_CUENTA, NUMERO, BANCO_ID_BANCO, TIPO_CUENTA_ID_TIPO_CUENTA)
    VALUES (SEQ_CUENTA.NEXTVAL,P_NUMERO,P_BANCO_ID_BANCO,P_TIPO_CUENTA_ID_TIPO_CUENTA);
  END SP_INSERTAR_CUENTA;

  PROCEDURE SP_ELIMINAR_CUENTA(P_ID_CUENTA CUENTA.ID_CUENTA%TYPE) IS
  BEGIN
    DELETE FROM CUENTA
    WHERE ID_CUENTA = P_ID_CUENTA;
  END SP_ELIMINAR_CUENTA;     

  PROCEDURE SP_MODIFICAR_CUENTA(P_ID_CUENTA CUENTA.ID_CUENTA%TYPE,
                                P_NUMERO CUENTA.NUMERO%TYPE,
                                P_BANCO_ID_BANCO CUENTA.BANCO_ID_BANCO%TYPE,
                                P_TIPO_CUENTA_ID_TIPO_CUENTA CUENTA.TIPO_CUENTA_ID_TIPO_CUENTA%TYPE) IS
  BEGIN
    UPDATE CUENTA
    SET NUMERO = P_NUMERO,
        BANCO_ID_BANCO = P_BANCO_ID_BANCO,
        TIPO_CUENTA_ID_TIPO_CUENTA = P_TIPO_CUENTA_ID_TIPO_CUENTA
    WHERE ID_CUENTA = P_ID_CUENTA;
  END SP_MODIFICAR_CUENTA;

END CUENTA_PKG;
-------------------------------------------------------------------------------------------------------------------------------





-------------------------------------------------------------------------------------------------------------------------------
-- DIRECCION_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE DIRECCION_PKG AS 

  PROCEDURE SP_MOSTRAR_DIRECCION(P_ID_DIRECCION DIRECCION.ID_DIRECCION%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_DIRECCION(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_DIRECCION( 	P_CALLE DIRECCION.CALLE%TYPE,
                                	P_NUMERACION DIRECCION.NUMERACION%TYPE,
                                	P_LATITUD DIRECCION.LATITUD%TYPE,
                                	P_LONGITUD DIRECCION.LONGITUD%TYPE,
                                	P_COMUNA_ID_COMUNA DIRECCION.COMUNA_ID_COMUNA%TYPE);

  PROCEDURE SP_ELIMINAR_DIRECCION(P_ID_DIRECCION DIRECCION.ID_DIRECCION%TYPE);

  PROCEDURE SP_MODIFICAR_DIRECCION(	P_ID_DIRECCION DIRECCION.ID_DIRECCION%TYPE,
                                	P_CALLE DIRECCION.CALLE%TYPE,
                                	P_NUMERACION DIRECCION.NUMERACION%TYPE,
                                	P_LATITUD DIRECCION.LATITUD%TYPE,
                                	P_LONGITUD DIRECCION.LONGITUD%TYPE,
                                	P_COMUNA_ID_COMUNA DIRECCION.COMUNA_ID_COMUNA%TYPE);

END DIRECCION_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- DIRECCION_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY DIRECCION_PKG AS

  PROCEDURE SP_MOSTRAR_DIRECCION(P_ID_DIRECCION DIRECCION.ID_DIRECCION%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_DIRECCION, CALLE, NUMERACION, LATITUD, LONGITUD, COMUNA_ID_COMUNA
      FROM DIRECCION
      WHERE ID_DIRECCION = P_ID_DIRECCION;
  END SP_MOSTRAR_DIRECCION;

  PROCEDURE SP_TODOS_DIRECCION(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_DIRECCION, CALLE, NUMERACION, LATITUD, LONGITUD, COMUNA_ID_COMUNA
      FROM DIRECCION;
  END SP_TODOS_DIRECCION;

  PROCEDURE SP_INSERTAR_DIRECCION( 	P_CALLE DIRECCION.CALLE%TYPE,
                                	P_NUMERACION DIRECCION.NUMERACION%TYPE,
                                	P_LATITUD DIRECCION.LATITUD%TYPE,
                                	P_LONGITUD DIRECCION.LONGITUD%TYPE,
                                	P_COMUNA_ID_COMUNA DIRECCION.COMUNA_ID_COMUNA%TYPE) IS
  BEGIN
    INSERT INTO DIRECCION(ID_DIRECCION, CALLE, NUMERACION, LATITUD, LONGITUD, COMUNA_ID_COMUNA)
    VALUES (SEQ_DIRECCION.NEXTVAL,P_CALLE,P_NUMERACION,P_LATITUD,P_LONGITUD,P_COMUNA_ID_COMUNA);
  END SP_INSERTAR_DIRECCION;

  PROCEDURE SP_ELIMINAR_DIRECCION(P_ID_DIRECCION DIRECCION.ID_DIRECCION%TYPE) IS
  BEGIN
    DELETE FROM DIRECCION
    WHERE ID_DIRECCION = P_ID_DIRECCION;
  END SP_ELIMINAR_DIRECCION;     

  PROCEDURE SP_MODIFICAR_DIRECCION(	P_ID_DIRECCION DIRECCION.ID_DIRECCION%TYPE,
                                	P_CALLE DIRECCION.CALLE%TYPE,
                                	P_NUMERACION DIRECCION.NUMERACION%TYPE,
                                	P_LATITUD DIRECCION.LATITUD%TYPE,
                                	P_LONGITUD DIRECCION.LONGITUD%TYPE,
                                	P_COMUNA_ID_COMUNA DIRECCION.COMUNA_ID_COMUNA%TYPE) IS
  BEGIN
    UPDATE DIRECCION
    SET CALLE = P_CALLE,
        NUMERACION = P_NUMERACION,
        LATITUD = P_LATITUD,
        LONGITUD = P_LONGITUD,
        COMUNA_ID_COMUNA = P_COMUNA_ID_COMUNA
    WHERE ID_DIRECCION = P_ID_DIRECCION;
  END SP_MODIFICAR_DIRECCION;

END DIRECCION_PKG;
-------------------------------------------------------------------------------------------------------------------------------









-------------------------------------------------------------------------------------------------------------------------------
-- EST_ESTACIONAMIENTO_PKG
-------------------------------------------------------------------------------------------------------------------------------

create or replace PACKAGE EST_ESTACIONAMIENTO_PKG AS 

  PROCEDURE SP_MOSTRAR_EST_ESTACIONAMIENTO(P_ID_ESTADO EST_ESTACIONAMIENTO.ID_ESTADO%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_EST_ESTACIONAMIENTO(PCURSOR OUT SYS_REFCURSOR);

END EST_ESTACIONAMIENTO_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- EST_ESTACIONAMIENTO_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE BODY EST_ESTACIONAMIENTO_PKG AS

  PROCEDURE SP_MOSTRAR_EST_ESTACIONAMIENTO(P_ID_ESTADO EST_ESTACIONAMIENTO.ID_ESTADO%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_ESTADO, NOMBRE
      FROM EST_ESTACIONAMIENTO
      WHERE ID_ESTADO = P_ID_ESTADO;
  END SP_MOSTRAR_EST_ESTACIONAMIENTO;

  PROCEDURE SP_TODOS_EST_ESTACIONAMIENTO(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_ESTADO, NOMBRE
      FROM EST_ESTACIONAMIENTO;
  END SP_TODOS_EST_ESTACIONAMIENTO;

END EST_ESTACIONAMIENTO_PKG;
-------------------------------------------------------------------------------------------------------------------------------















-------------------------------------------------------------------------------------------------------------------------------
-- EST_PAGO_PKG
-------------------------------------------------------------------------------------------------------------------------------

create or replace PACKAGE EST_PAGO_PKG AS 

  PROCEDURE SP_MOSTRAR_EST_PAGO(P_ID_ESTADO EST_PAGO.ID_ESTADO%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_EST_PAGO(PCURSOR OUT SYS_REFCURSOR);

END EST_PAGO_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- EST_PAGO_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE BODY EST_PAGO_PKG AS

  PROCEDURE SP_MOSTRAR_EST_PAGO(P_ID_ESTADO EST_PAGO.ID_ESTADO%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_ESTADO, NOMBRE
      FROM EST_PAGO
      WHERE ID_ESTADO = P_ID_ESTADO;
  END SP_MOSTRAR_EST_PAGO;

  PROCEDURE SP_TODOS_EST_PAGO(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_ESTADO, NOMBRE
      FROM EST_PAGO;
  END SP_TODOS_EST_PAGO;

END EST_PAGO_PKG;
-------------------------------------------------------------------------------------------------------------------------------











-------------------------------------------------------------------------------------------------------------------------------
-- EST_USUARIO_PKG
-------------------------------------------------------------------------------------------------------------------------------

create or replace PACKAGE EST_USUARIO_PKG AS 

  PROCEDURE SP_MOSTRAR_EST_USUARIO(P_ID_ESTADO EST_USUARIO.ID_ESTADO%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_EST_USUARIO(PCURSOR OUT SYS_REFCURSOR);

END EST_USUARIO_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- EST_USUARIO_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE BODY EST_USUARIO_PKG AS

  PROCEDURE SP_MOSTRAR_EST_USUARIO(P_ID_ESTADO EST_USUARIO.ID_ESTADO%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_ESTADO, NOMBRE
      FROM EST_USUARIO
      WHERE ID_ESTADO = P_ID_ESTADO;
  END SP_MOSTRAR_EST_USUARIO;

  PROCEDURE SP_TODOS_EST_USUARIO(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_ESTADO, NOMBRE
      FROM EST_USUARIO;
  END SP_TODOS_EST_USUARIO;

END EST_USUARIO_PKG;
-------------------------------------------------------------------------------------------------------------------------------





-------------------------------------------------------------------------------------------------------------------------------
-- ESTACIONAMIENTO_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE ESTACIONAMIENTO_PKG AS 

  PROCEDURE SP_MOSTRAR_ESTACIONAMIENTO(P_ID_ESTACIONAMIENTO ESTACIONAMIENTO.ID_ESTACIONAMIENTO%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_ESTACIONAMIENTO(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_ESTACIONAMIENTO( 	P_IDENTIFICADOR ESTACIONAMIENTO.IDENTIFICADOR%TYPE,
		                                	P_USUARIO_ID_USUARIO ESTACIONAMIENTO.USUARIO_ID_USUARIO%TYPE,
		                                	P_DIRECCION_ID_DIRECCION ESTACIONAMIENTO.DIRECCION_ID_DIRECCION%TYPE,
		                                	P_EST_ESTACIONAMIENTO_ID ESTACIONAMIENTO.EST_ESTACIONAMIENTO_ID%TYPE,
		                                	P_TIPO_APERTURA_ID ESTACIONAMIENTO.TIPO_APERTURA_ID%TYPE,
		                                	P_TARIFA_ACTIVA_ID ESTACIONAMIENTO.TARIFA_ACTIVA_ID%TYPE,
		                                	P_HORARIO_INICIO ESTACIONAMIENTO.HORARIO_INICIO%TYPE,
		                                	P_HORARIO_FIN ESTACIONAMIENTO.HORARIO_FIN%TYPE);

  PROCEDURE SP_ELIMINAR_ESTACIONAMIENTO(P_ID_ESTACIONAMIENTO ESTACIONAMIENTO.ID_ESTACIONAMIENTO%TYPE);

  PROCEDURE SP_MODIFICAR_ESTACIONAMIENTO(	P_ID_ESTACIONAMIENTO ESTACIONAMIENTO.ID_ESTACIONAMIENTO%TYPE,
		                                	P_IDENTIFICADOR ESTACIONAMIENTO.IDENTIFICADOR%TYPE,
		                                	P_USUARIO_ID_USUARIO ESTACIONAMIENTO.USUARIO_ID_USUARIO%TYPE,
		                                	P_DIRECCION_ID_DIRECCION ESTACIONAMIENTO.DIRECCION_ID_DIRECCION%TYPE,
		                                	P_EST_ESTACIONAMIENTO_ID ESTACIONAMIENTO.EST_ESTACIONAMIENTO_ID%TYPE,
		                                	P_TIPO_APERTURA_ID ESTACIONAMIENTO.TIPO_APERTURA_ID%TYPE,
		                                	P_TARIFA_ACTIVA_ID ESTACIONAMIENTO.TARIFA_ACTIVA_ID%TYPE,
		                                	P_HORARIO_INICIO ESTACIONAMIENTO.HORARIO_INICIO%TYPE,
		                                	P_HORARIO_FIN ESTACIONAMIENTO.HORARIO_FIN%TYPE);

END ESTACIONAMIENTO_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- ESTACIONAMIENTO_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY ESTACIONAMIENTO_PKG AS

  PROCEDURE SP_MOSTRAR_ESTACIONAMIENTO(P_ID_ESTACIONAMIENTO ESTACIONAMIENTO.ID_ESTACIONAMIENTO%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_ESTACIONAMIENTO, IDENTIFICADOR, USUARIO_ID_USUARIO, DIRECCION_ID_DIRECCION,EST_ESTACIONAMIENTO_ID, TIPO_APERTURA_ID, TARIFA_ACTIVA_ID, HORARIO_INICIO, HORARIO_FIN
      FROM ESTACIONAMIENTO
      WHERE ID_ESTACIONAMIENTO = P_ID_ESTACIONAMIENTO;
  END SP_MOSTRAR_ESTACIONAMIENTO;

  PROCEDURE SP_TODOS_ESTACIONAMIENTO(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_ESTACIONAMIENTO, IDENTIFICADOR, USUARIO_ID_USUARIO, DIRECCION_ID_DIRECCION,EST_ESTACIONAMIENTO_ID, TIPO_APERTURA_ID, TARIFA_ACTIVA_ID, HORARIO_INICIO, HORARIO_FIN
      FROM ESTACIONAMIENTO;
  END SP_TODOS_ESTACIONAMIENTO;

  PROCEDURE SP_INSERTAR_ESTACIONAMIENTO(P_IDENTIFICADOR ESTACIONAMIENTO.IDENTIFICADOR%TYPE,
		                                P_USUARIO_ID_USUARIO ESTACIONAMIENTO.USUARIO_ID_USUARIO%TYPE,
		                                P_DIRECCION_ID_DIRECCION ESTACIONAMIENTO.DIRECCION_ID_DIRECCION%TYPE,
		                                P_EST_ESTACIONAMIENTO_ID ESTACIONAMIENTO.EST_ESTACIONAMIENTO_ID%TYPE,
		                                P_TIPO_APERTURA_ID ESTACIONAMIENTO.TIPO_APERTURA_ID%TYPE,
		                                P_TARIFA_ACTIVA_ID ESTACIONAMIENTO.TARIFA_ACTIVA_ID%TYPE,
		                                P_HORARIO_INICIO ESTACIONAMIENTO.HORARIO_INICIO%TYPE,
		                                P_HORARIO_FIN ESTACIONAMIENTO.HORARIO_FIN%TYPE) IS
  BEGIN
    INSERT INTO ESTACIONAMIENTO(ID_ESTACIONAMIENTO, IDENTIFICADOR, USUARIO_ID_USUARIO, DIRECCION_ID_DIRECCION,EST_ESTACIONAMIENTO_ID, TIPO_APERTURA_ID, TARIFA_ACTIVA_ID, HORARIO_INICIO, HORARIO_FIN)
    VALUES (SEQ_ESTACIONAMIENTO.NEXTVAL, P_IDENTIFICADOR, P_USUARIO_ID_USUARIO, P_DIRECCION_ID_DIRECCION,P_EST_ESTACIONAMIENTO_ID, P_TIPO_APERTURA_ID, P_TARIFA_ACTIVA_ID, P_HORARIO_INICIO, P_HORARIO_FIN);
  END SP_INSERTAR_ESTACIONAMIENTO;

  PROCEDURE SP_ELIMINAR_ESTACIONAMIENTO(P_ID_ESTACIONAMIENTO ESTACIONAMIENTO.ID_ESTACIONAMIENTO%TYPE) IS
  BEGIN
    DELETE FROM ESTACIONAMIENTO
    WHERE ID_ESTACIONAMIENTO = P_ID_ESTACIONAMIENTO;
  END SP_ELIMINAR_ESTACIONAMIENTO;     

  PROCEDURE SP_MODIFICAR_ESTACIONAMIENTO(	P_ID_ESTACIONAMIENTO ESTACIONAMIENTO.ID_ESTACIONAMIENTO%TYPE,
		                                	P_IDENTIFICADOR ESTACIONAMIENTO.IDENTIFICADOR%TYPE,
		                                	P_USUARIO_ID_USUARIO ESTACIONAMIENTO.USUARIO_ID_USUARIO%TYPE,
		                                	P_DIRECCION_ID_DIRECCION ESTACIONAMIENTO.DIRECCION_ID_DIRECCION%TYPE,
		                                	P_EST_ESTACIONAMIENTO_ID ESTACIONAMIENTO.EST_ESTACIONAMIENTO_ID%TYPE,
		                                	P_TIPO_APERTURA_ID ESTACIONAMIENTO.TIPO_APERTURA_ID%TYPE,
		                                	P_TARIFA_ACTIVA_ID ESTACIONAMIENTO.TARIFA_ACTIVA_ID%TYPE,
		                                	P_HORARIO_INICIO ESTACIONAMIENTO.HORARIO_INICIO%TYPE,
		                                	P_HORARIO_FIN ESTACIONAMIENTO.HORARIO_FIN%TYPE) IS
  BEGIN
    UPDATE ESTACIONAMIENTO
    SET IDENTIFICADOR = P_IDENTIFICADOR,
    	USUARIO_ID_USUARIO = P_USUARIO_ID_USUARIO,
    	DIRECCION_ID_DIRECCION = P_DIRECCION_ID_DIRECCION,
    	EST_ESTACIONAMIENTO_ID = P_EST_ESTACIONAMIENTO_ID,
    	TIPO_APERTURA_ID = P_TIPO_APERTURA_ID,
    	TARIFA_ACTIVA_ID = P_TARIFA_ACTIVA_ID,
    	HORARIO_INICIO = P_HORARIO_INICIO,
    	HORARIO_FIN = P_HORARIO_FIN
    WHERE ID_ESTACIONAMIENTO = P_ID_ESTACIONAMIENTO;
  END SP_MODIFICAR_ESTACIONAMIENTO;

END ESTACIONAMIENTO_PKG;
-------------------------------------------------------------------------------------------------------------------------------















-------------------------------------------------------------------------------------------------------------------------------
-- RESERVA_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE RESERVA_PKG AS 

  PROCEDURE SP_MOSTRAR_RESERVA(P_ID_RESERVA RESERVA.ID_RESERVA%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_RESERVA(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_RESERVA(P_TIEMPO_INICIO RESERVA.TIEMPO_INICIO%TYPE,
		                        P_TIEMPO_FIN RESERVA.TIEMPO_FIN%TYPE,
		                        P_ESTACIONAMIENTO_ID RESERVA.ESTACIONAMIENTO_ID%TYPE,
		                        P_USUARIO_ID_USUARIO RESERVA.USUARIO_ID_USUARIO%TYPE,
		                        P_MONTO_TARIFA RESERVA.MONTO_TARIFA%TYPE,
		                        P_MINUTOS_USADOS RESERVA.MINUTOS_USADOS%TYPE,
		                        P_TOTAL RESERVA.TOTAL%TYPE,
		                        P_EST_PAGO_ID_ESTADO RESERVA.EST_PAGO_ID_ESTADO%TYPE,
		                        P_VEHICULO_ID RESERVA.VEHICULO_ID%TYPE);

  PROCEDURE SP_ELIMINAR_RESERVA(P_ID_RESERVA RESERVA.ID_RESERVA%TYPE);

  PROCEDURE SP_MODIFICAR_RESERVA(	P_ID_RESERVA RESERVA.ID_RESERVA%TYPE,
		                            P_TIEMPO_INICIO RESERVA.TIEMPO_INICIO%TYPE,
			                        P_TIEMPO_FIN RESERVA.TIEMPO_FIN%TYPE,
			                        P_ESTACIONAMIENTO_ID RESERVA.ESTACIONAMIENTO_ID%TYPE,
			                        P_USUARIO_ID_USUARIO RESERVA.USUARIO_ID_USUARIO%TYPE,
			                        P_MONTO_TARIFA RESERVA.MONTO_TARIFA%TYPE,
			                        P_MINUTOS_USADOS RESERVA.MINUTOS_USADOS%TYPE,
			                        P_TOTAL RESERVA.TOTAL%TYPE,
			                        P_EST_PAGO_ID_ESTADO RESERVA.EST_PAGO_ID_ESTADO%TYPE,
			                        P_VEHICULO_ID RESERVA.VEHICULO_ID%TYPE);

END RESERVA_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- RESERVA_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY RESERVA_PKG AS

  PROCEDURE SP_MOSTRAR_RESERVA(P_ID_RESERVA RESERVA.ID_RESERVA%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_RESERVA, TIEMPO_INICIO, TIEMPO_FIN, ESTACIONAMIENTO_ID, USUARIO_ID_USUARIO, MONTO_TARIFA, MINUTOS_USADOS, TOTAL, EST_PAGO_ID_ESTADO, VEHICULO_ID
      FROM RESERVA
      WHERE ID_RESERVA = P_ID_RESERVA;
  END SP_MOSTRAR_RESERVA;

  PROCEDURE SP_TODOS_RESERVA(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_RESERVA, TIEMPO_INICIO, TIEMPO_FIN, ESTACIONAMIENTO_ID, USUARIO_ID_USUARIO, MONTO_TARIFA, MINUTOS_USADOS, TOTAL, EST_PAGO_ID_ESTADO, VEHICULO_ID
      FROM RESERVA;
  END SP_TODOS_RESERVA;

  PROCEDURE SP_INSERTAR_RESERVA(P_TIEMPO_INICIO RESERVA.TIEMPO_INICIO%TYPE,
		                        P_TIEMPO_FIN RESERVA.TIEMPO_FIN%TYPE,
		                        P_ESTACIONAMIENTO_ID RESERVA.ESTACIONAMIENTO_ID%TYPE,
		                        P_USUARIO_ID_USUARIO RESERVA.USUARIO_ID_USUARIO%TYPE,
		                        P_MONTO_TARIFA RESERVA.MONTO_TARIFA%TYPE,
		                        P_MINUTOS_USADOS RESERVA.MINUTOS_USADOS%TYPE,
		                        P_TOTAL RESERVA.TOTAL%TYPE,
		                        P_EST_PAGO_ID_ESTADO RESERVA.EST_PAGO_ID_ESTADO%TYPE,
		                        P_VEHICULO_ID RESERVA.VEHICULO_ID%TYPE) IS
  BEGIN
    INSERT INTO RESERVA(ID_RESERVA, TIEMPO_INICIO, TIEMPO_FIN, ESTACIONAMIENTO_ID, USUARIO_ID_USUARIO, MONTO_TARIFA, MINUTOS_USADOS, TOTAL, EST_PAGO_ID_ESTADO, VEHICULO_ID)
    VALUES (SEQ_RESERVA.NEXTVAL, P_TIEMPO_INICIO, P_TIEMPO_FIN, P_ESTACIONAMIENTO_ID, P_USUARIO_ID_USUARIO, P_MONTO_TARIFA, P_MINUTOS_USADOS, P_TOTAL, P_EST_PAGO_ID_ESTADO, P_VEHICULO_ID);
  END SP_INSERTAR_RESERVA;

  PROCEDURE SP_ELIMINAR_RESERVA(P_ID_RESERVA RESERVA.ID_RESERVA%TYPE) IS
  BEGIN
    DELETE FROM RESERVA
    WHERE ID_RESERVA = P_ID_RESERVA;
  END SP_ELIMINAR_RESERVA;     

  PROCEDURE SP_MODIFICAR_RESERVA(	P_ID_RESERVA RESERVA.ID_RESERVA%TYPE,
		                            P_TIEMPO_INICIO RESERVA.TIEMPO_INICIO%TYPE,
			                        P_TIEMPO_FIN RESERVA.TIEMPO_FIN%TYPE,
			                        P_ESTACIONAMIENTO_ID RESERVA.ESTACIONAMIENTO_ID%TYPE,
			                        P_USUARIO_ID_USUARIO RESERVA.USUARIO_ID_USUARIO%TYPE,
			                        P_MONTO_TARIFA RESERVA.MONTO_TARIFA%TYPE,
			                        P_MINUTOS_USADOS RESERVA.MINUTOS_USADOS%TYPE,
			                        P_TOTAL RESERVA.TOTAL%TYPE,
			                        P_EST_PAGO_ID_ESTADO RESERVA.EST_PAGO_ID_ESTADO%TYPE,
			                        P_VEHICULO_ID RESERVA.VEHICULO_ID%TYPE) IS
  BEGIN
    UPDATE RESERVA
    SET TIEMPO_INICIO = P_TIEMPO_INICIO,
    	TIEMPO_FIN = P_TIEMPO_FIN,
    	ESTACIONAMIENTO_ID = P_ESTACIONAMIENTO_ID,
    	USUARIO_ID_USUARIO = P_USUARIO_ID_USUARIO,
    	MONTO_TARIFA = P_MONTO_TARIFA,
    	MINUTOS_USADOS = P_MINUTOS_USADOS,
    	TOTAL = P_TOTAL,
    	EST_PAGO_ID_ESTADO = P_EST_PAGO_ID_ESTADO,
    	VEHICULO_ID = P_VEHICULO_ID
    WHERE ID_RESERVA = P_ID_RESERVA;
  END SP_MODIFICAR_RESERVA;

END RESERVA_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- TARIFA_ACTIVA_PKG
-------------------------------------------------------------------------------------------------------------------------------

create or replace PACKAGE TARIFA_ACTIVA_PKG AS 

  PROCEDURE SP_MOSTRAR_TARIFA_ACTIVA(P_ID_TARIFA_ACTIVA TARIFA_ACTIVA.ID_TARIFA_ACTIVA%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_TARIFA_ACTIVA(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_TARIFA_ACTIVA(P_TIPO_TARIFA_ID TARIFA_ACTIVA.TIPO_TARIFA_ID%TYPE);

  PROCEDURE SP_ELIMINAR_TARIFA_ACTIVA(P_ID_TARIFA_ACTIVA TARIFA_ACTIVA.ID_TARIFA_ACTIVA%TYPE);

  PROCEDURE SP_MODIFICAR_TARIFA_ACTIVA( P_ID_TARIFA_ACTIVA TARIFA_ACTIVA.ID_TARIFA_ACTIVA%TYPE, 
  										P_TIPO_TARIFA_ID TARIFA_ACTIVA.TIPO_TARIFA_ID%TYPE);

END TARIFA_ACTIVA_PKG;
-------------------------------------------------------------------------------------------------------------------------------





-------------------------------------------------------------------------------------------------------------------------------
-- TARIFA_ACTIVA_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE BODY TARIFA_ACTIVA_PKG AS

  PROCEDURE SP_MOSTRAR_TARIFA_ACTIVA(P_ID_TARIFA_ACTIVA TARIFA_ACTIVA.ID_TARIFA_ACTIVA%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TARIFA_ACTIVA, TIPO_TARIFA_ID
      FROM TARIFA_ACTIVA
      WHERE ID_TARIFA_ACTIVA = P_ID_TARIFA_ACTIVA;
  END SP_MOSTRAR_TARIFA_ACTIVA;

  PROCEDURE SP_TODOS_TARIFA_ACTIVA(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TARIFA_ACTIVA, TIPO_TARIFA_ID
      FROM TARIFA_ACTIVA;
  END SP_TODOS_TARIFA_ACTIVA;

  PROCEDURE SP_INSERTAR_TARIFA_ACTIVA(P_TIPO_TARIFA_ID TARIFA_ACTIVA.TIPO_TARIFA_ID%TYPE) IS
  BEGIN
    INSERT INTO TARIFA_ACTIVA(ID_TARIFA_ACTIVA, TIPO_TARIFA_ID)
    VALUES (SEQ_TARIFA_ACTIVA.NEXTVAL, P_TIPO_TARIFA_ID);
  END SP_INSERTAR_TARIFA_ACTIVA;

  PROCEDURE SP_ELIMINAR_TARIFA_ACTIVA(P_ID_TARIFA_ACTIVA TARIFA_ACTIVA.ID_TARIFA_ACTIVA%TYPE) IS
  BEGIN
    DELETE FROM TARIFA_ACTIVA
    WHERE ID_TARIFA_ACTIVA = P_ID_TARIFA_ACTIVA;
  END SP_ELIMINAR_TARIFA_ACTIVA;     

  PROCEDURE SP_MODIFICAR_TARIFA_ACTIVA( P_ID_TARIFA_ACTIVA TARIFA_ACTIVA.ID_TARIFA_ACTIVA%TYPE, 
  										P_TIPO_TARIFA_ID TARIFA_ACTIVA.TIPO_TARIFA_ID%TYPE) IS
  BEGIN
    UPDATE TARIFA_ACTIVA
    SET TIPO_TARIFA_ID = P_TIPO_TARIFA_ID
    WHERE ID_TARIFA_ACTIVA = P_ID_TARIFA_ACTIVA;
  END SP_MODIFICAR_TARIFA_ACTIVA;

END TARIFA_ACTIVA_PKG;
-------------------------------------------------------------------------------------------------------------------------------













-------------------------------------------------------------------------------------------------------------------------------
-- TARJETA_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE TARJETA_PKG AS 

  PROCEDURE SP_MOSTRAR_TARJETA(P_ID_TARJETA TARJETA.ID_TARJETA%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_TARJETA(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_TARJETA(P_NUMERO TARJETA.NUMERO%TYPE,
                                P_DV TARJETA.DV%TYPE,
                                P_MES_VENC TARJETA.MES_VENC%TYPE,
                                P_ANO_VENC  TARJETA.ANO_VENC%TYPE);

  PROCEDURE SP_ELIMINAR_TARJETA(P_ID_TARJETA TARJETA.ID_TARJETA%TYPE);

  PROCEDURE SP_MODIFICAR_TARJETA(   P_ID_TARJETA TARJETA.ID_TARJETA%TYPE,
                                    P_NUMERO TARJETA.NUMERO%TYPE,
                                    P_DV TARJETA.DV%TYPE,
                                    P_MES_VENC TARJETA.MES_VENC%TYPE,
                                    P_ANO_VENC  TARJETA.ANO_VENC%TYPE);

END TARJETA_PKG;
-------------------------------------------------------------------------------------------------------------------------------





-------------------------------------------------------------------------------------------------------------------------------
-- TARJETA_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY TARJETA_PKG AS

  PROCEDURE SP_MOSTRAR_TARJETA(P_ID_TARJETA TARJETA.ID_TARJETA%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TARJETA, NUMERO, DV, MES_VENC, ANO_VENC
      FROM TARJETA
      WHERE ID_TARJETA = P_ID_TARJETA;
  END SP_MOSTRAR_TARJETA;

  PROCEDURE SP_TODOS_TARJETA(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TARJETA, NUMERO, DV, MES_VENC, ANO_VENC
      FROM TARJETA;
  END SP_TODOS_TARJETA;

  PROCEDURE SP_INSERTAR_TARJETA(P_NUMERO TARJETA.NUMERO%TYPE,
                                P_DV TARJETA.DV%TYPE,
                                P_MES_VENC TARJETA.MES_VENC%TYPE,
                                P_ANO_VENC  TARJETA.ANO_VENC%TYPE) IS
  BEGIN
    INSERT INTO TARJETA(ID_TARJETA, NUMERO, DV, MES_VENC, ANO_VENC)
    VALUES (SEQ_TARJETA.NEXTVAL,P_NUMERO,P_DV,P_MES_VENC,P_ANO_VENC);
  END SP_INSERTAR_TARJETA;

  PROCEDURE SP_ELIMINAR_TARJETA(P_ID_TARJETA TARJETA.ID_TARJETA%TYPE) IS
  BEGIN
    DELETE FROM TARJETA
    WHERE ID_TARJETA = P_ID_TARJETA;
  END SP_ELIMINAR_TARJETA;     

  PROCEDURE SP_MODIFICAR_TARJETA(   P_ID_TARJETA TARJETA.ID_TARJETA%TYPE,
                                    P_NUMERO TARJETA.NUMERO%TYPE,
                                    P_DV TARJETA.DV%TYPE,
                                    P_MES_VENC TARJETA.MES_VENC%TYPE,
                                    P_ANO_VENC  TARJETA.ANO_VENC%TYPE) IS
  BEGIN
    UPDATE TARJETA
    SET NUMERO = P_NUMERO,
        DV = P_DV,
        MES_VENC = P_MES_VENC,
        ANO_VENC = P_ANO_VENC
    WHERE ID_TARJETA = P_ID_TARJETA;
  END SP_MODIFICAR_TARJETA;

END TARJETA_PKG;
-------------------------------------------------------------------------------------------------------------------------------











-------------------------------------------------------------------------------------------------------------------------------
-- TIPO_APERTURA_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE TIPO_APERTURA_PKG AS 

  PROCEDURE SP_MOSTRAR_TIPO_APERTURA(P_ID_TIPO_APERTURA TIPO_APERTURA.ID_TIPO_APERTURA%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_TIPO_APERTURA(PCURSOR OUT SYS_REFCURSOR);

END TIPO_APERTURA_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- TIPO_APERTURA_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY TIPO_APERTURA_PKG AS

  PROCEDURE SP_MOSTRAR_TIPO_APERTURA(P_ID_TIPO_APERTURA TIPO_APERTURA.ID_TIPO_APERTURA%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TIPO_APERTURA, NOMBRE
      FROM TIPO_APERTURA
      WHERE ID_TIPO_APERTURA = P_ID_TIPO_APERTURA;
  END SP_MOSTRAR_TIPO_APERTURA;

  PROCEDURE SP_TODOS_TIPO_APERTURA(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TIPO_APERTURA, NOMBRE
      FROM TIPO_APERTURA;
  END SP_TODOS_TIPO_APERTURA;

END TIPO_APERTURA_PKG;
-------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------
-- TIPO_CALIFICACION_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE TIPO_CALIFICACION_PKG AS 

  PROCEDURE SP_MOSTRAR_TIPO_CALIFICACION(P_ID_TIPO_CALIFICACION TIPO_CALIFICACION.ID_TIPO_CALIFICACION%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_TIPO_CALIFICACION(PCURSOR OUT SYS_REFCURSOR);

END TIPO_CALIFICACION_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- TIPO_CALIFICACION_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY TIPO_CALIFICACION_PKG AS

  PROCEDURE SP_MOSTRAR_TIPO_CALIFICACION(P_ID_TIPO_CALIFICACION TIPO_CALIFICACION.ID_TIPO_CALIFICACION%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TIPO_CALIFICACION, NOMBRE
      FROM TIPO_CALIFICACION
      WHERE ID_TIPO_CALIFICACION = P_ID_TIPO_CALIFICACION;
  END SP_MOSTRAR_TIPO_CALIFICACION;

  PROCEDURE SP_TODOS_TIPO_CALIFICACION(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TIPO_CALIFICACION, NOMBRE
      FROM TIPO_CALIFICACION;
  END SP_TODOS_TIPO_CALIFICACION;

END TIPO_CALIFICACION_PKG;
-------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------
-- TIPO_CUENTA_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE TIPO_CUENTA_PKG AS 

  PROCEDURE SP_MOSTRAR_TIPO_CUENTA(P_ID_TIPO_CUENTA TIPO_CUENTA.ID_TIPO_CUENTA%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_TIPO_CUENTA(PCURSOR OUT SYS_REFCURSOR);

END TIPO_CUENTA_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- TIPO_CUENTA_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY TIPO_CUENTA_PKG AS

  PROCEDURE SP_MOSTRAR_TIPO_CUENTA(P_ID_TIPO_CUENTA TIPO_CUENTA.ID_TIPO_CUENTA%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TIPO_CUENTA, NOMBRE
      FROM TIPO_CUENTA
      WHERE ID_TIPO_CUENTA = P_ID_TIPO_CUENTA;
  END SP_MOSTRAR_TIPO_CUENTA;

  PROCEDURE SP_TODOS_TIPO_CUENTA(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TIPO_CUENTA, NOMBRE
      FROM TIPO_CUENTA;
  END SP_TODOS_TIPO_CUENTA;

END TIPO_CUENTA_PKG;
-------------------------------------------------------------------------------------------------------------------------------








-------------------------------------------------------------------------------------------------------------------------------
-- TIPO_TARIFA_PKG
-------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE 
PACKAGE TIPO_TARIFA_PKG AS 

  PROCEDURE SP_MOSTRAR_TIPO_TARIFA(P_ID_TIPO_TARIFA TIPO_TARIFA.ID_TIPO_TARIFA%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_TIPO_TARIFA(PCURSOR OUT SYS_REFCURSOR);

END TIPO_TARIFA_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- TIPO_TARIFA_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE
PACKAGE BODY TIPO_TARIFA_PKG AS

  PROCEDURE SP_MOSTRAR_TIPO_TARIFA(P_ID_TIPO_TARIFA TIPO_TARIFA.ID_TIPO_TARIFA%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TIPO_TARIFA, NOMBRE
      FROM TIPO_TARIFA
      WHERE ID_TIPO_TARIFA = P_ID_TIPO_TARIFA;
  END SP_MOSTRAR_TIPO_TARIFA;

  PROCEDURE SP_TODOS_TIPO_TARIFA(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_TIPO_TARIFA, NOMBRE
      FROM TIPO_TARIFA;
  END SP_TODOS_TIPO_TARIFA;

END TIPO_TARIFA_PKG;
-------------------------------------------------------------------------------------------------------------------------------





-------------------------------------------------------------------------------------------------------------------------------
-- VEHICULO_PKG
-------------------------------------------------------------------------------------------------------------------------------

create or replace PACKAGE VEHICULO_PKG AS 

  PROCEDURE SP_MOSTRAR_VEHICULO(P_ID_VEHICULO VEHICULO.ID_VEHICULO%TYPE, PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_TODOS_VEHICULO(PCURSOR OUT SYS_REFCURSOR);

  PROCEDURE SP_INSERTAR_VEHICULO(P_PATENTE VEHICULO.PATENTE%TYPE);

  PROCEDURE SP_ELIMINAR_VEHICULO(P_ID_VEHICULO VEHICULO.ID_VEHICULO%TYPE);

  PROCEDURE SP_MODIFICAR_VEHICULO( P_ID_VEHICULO VEHICULO.ID_VEHICULO%TYPE, P_PATENTE VEHICULO.PATENTE%TYPE);

END VEHICULO_PKG;
-------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------
-- VEHICULO_PKG   BODY
-------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE BODY VEHICULO_PKG AS

  PROCEDURE SP_MOSTRAR_VEHICULO(P_ID_VEHICULO VEHICULO.ID_VEHICULO%TYPE, PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_VEHICULO, PATENTE
      FROM VEHICULO
      WHERE ID_VEHICULO = P_ID_VEHICULO;
  END SP_MOSTRAR_VEHICULO;

  PROCEDURE SP_TODOS_VEHICULO(PCURSOR OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT ID_VEHICULO, PATENTE
      FROM VEHICULO;
  END SP_TODOS_VEHICULO;

  PROCEDURE SP_INSERTAR_VEHICULO(P_PATENTE VEHICULO.PATENTE%TYPE) IS
  BEGIN
    INSERT INTO VEHICULO(ID_VEHICULO, PATENTE)
    VALUES (SEQ_VEHICULO.NEXTVAL, P_PATENTE);
  END SP_INSERTAR_VEHICULO;

  PROCEDURE SP_ELIMINAR_VEHICULO(P_ID_VEHICULO VEHICULO.ID_VEHICULO%TYPE) IS
  BEGIN
    DELETE FROM VEHICULO
    WHERE ID_VEHICULO = P_ID_VEHICULO;
  END SP_ELIMINAR_VEHICULO;     

  PROCEDURE SP_MODIFICAR_VEHICULO(  P_ID_VEHICULO VEHICULO.ID_VEHICULO%TYPE, 
                                    P_PATENTE VEHICULO.PATENTE%TYPE) IS
  BEGIN
    UPDATE VEHICULO
    SET PATENTE = P_PATENTE
    WHERE ID_VEHICULO = P_ID_VEHICULO;
  END SP_MODIFICAR_VEHICULO;

END VEHICULO_PKG;
-------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------
-- CATASTRO
-------------------------------------------------------------------------------------------------------------------------------
-- PACKAGE POR HACER ###
-- TABLAS CON SEMILLAS INICIALES ***
-- LISTOS 
-------------------------------------------------------------------------------------------------------------------------------
###--BANCO***                   /		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--CALIFICACION               /		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--COMUNA***                  / 		MOSTRAR-TODOS
###--CUENTA                     /		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--DIRECCION 					/		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--EST_ESTACIONAMIENTO*** 	/		MOSTRAR-TODOS
###--EST_PAGO***				/		MOSTRAR-TODOS
###--EST_USUARIO***				/		MOSTRAR-TODOS
###--ESTACIONAMIENTO 			/		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--RESERVA 					/		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--ROL***                     /		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--TARIFA                     / 		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--TARIFA_ACTIVA 				/		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--TARJETA 					/		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--TIPO_APERTURA*** 			/		MOSTRAR-TODOS
###--TIPO_CALIFICACION***		/		MOSTRAR-TODOS
###--TIPO_CUENTA***				/		MOSTRAR-TODOS
###--TIPO_TARIFA***				/		MOSTRAR-TODOS
###--USUARIO                    /		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR-VALIDAR_USUARIO-VALIDAR_EMAIL_USUARIO
###--USUARIO_VEHICULO_FK ? 				MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
###--VEHICULO 					/		MOSTRAR-TODOS-INSERTAR-ELIMINAR-MODIFICAR
-------------------------------------------------------------------------------------------------------------------------------

--NOTA-- EL PKG DE LA TABLA USUARIO_VEHICULO_FK SE CONFECCIONARA DE ACUERDO A LAS NECESIDADES CUANDO SE PROGRAME EL SISTEMA WEB.